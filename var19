#include <iostream>
#include <vector>
#include <string>
#include <limits>

struct Date {
    int year;
    int month;
    int day;
};

struct Grade {
    std::string subject;
    Date examDate;
    std::string teacherName;
    int score;
};

struct Student {
    std::string lastName;
    std::string firstName;
    Date birthDate;
    std::vector<Grade> grades;
};

// Функция для ввода данных о студенте
Student inputStudent() {
    Student student;

    std::cout << "Введите фамилию студента: ";
    std::cin >> student.lastName;
    std::cout << "Введите имя студента: ";
    std::cin >> student.firstName;
    std::cout << "Введите дату рождения (год месяц день): ";
    std::cin >> student.birthDate.year >> student.birthDate.month >> student.birthDate.day;

    int numSubjects;
    std::cout << "Введите количество предметов (от 3 до 5): ";
    std::cin >> numSubjects;
    student.grades.resize(numSubjects);

    for (int i = 0; i < numSubjects; ++i) {
        std::cout << "Введите название предмета: ";
        std::cin >> student.grades[i].subject;
        std::cout << "Введите дату экзамена (год месяц день): ";
        std::cin >> student.grades[i].examDate.year >> student.grades[i].examDate.month >> student.grades[i].examDate.day;
        std::cout << "Введите ФИО преподавателя: ";
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::getline(std::cin, student.grades[i].teacherName);
        std::cout << "Введите оценку: ";
        std::cin >> student.grades[i].score;
    }

    return student;
}

// Функция для вывода данных о студенте
void printStudent(const Student& student) {
    std::cout << "Фамилия: " << student.lastName << ", Имя: " << student.firstName << std::endl;
    std::cout << "Дата рождения: " << student.birthDate.year << "-" << student.birthDate.month << "-" << student.birthDate.day << std::endl;

    for (const auto& grade : student.grades) {
        std::cout << "Предмет: " << grade.subject << ", Дата экзамена: " << grade.examDate.year << "-" << grade.examDate.month << "-" << grade.examDate.day 
                  << ", Преподаватель: " << grade.teacherName << ", Оценка: " << grade.score << std::endl;
    }
}

// Функция для поиска студента с самой худшей успеваемостью
Student findWorstStudent(const std::vector<Student>& students) {
    Student worstStudent;
    int worstAverage = std::numeric_limits<int>::max();

    for (const auto& student : students) {
        int totalScore = 0;
        for (const auto& grade : student.grades) {
            totalScore += grade.score;
        }
        int averageScore = totalScore / student.grades.size();

        if (averageScore < worstAverage) {
            worstAverage = averageScore;
            worstStudent = student;
        }
    }

    return worstStudent;
}

int main() {
    int numStudents;
    std::cout << "Введите количество студентов: ";
    std::cin >> numStudents;

    std::vector<Student> students(numStudents);
    for (int i = 0; i < numStudents; ++i) {
        std::cout << "Введите данные для студента " << i + 1 << ":" << std::endl;
        students[i] = inputStudent();
    }

    // Нахождение студента с самой худшей успеваемостью
    Student worstStudent = findWorstStudent(students);

    // Вывод информации о студенте с самой худшей успеваемостью
    std::cout << "Студент с самой худшей успеваемостью:" << std::endl;
    printStudent(worstStudent);

    return 0;
}


    return 0;
}

